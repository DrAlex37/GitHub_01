#!/usr/bin/env python
# coding: utf-8

# In[31]:


import numpy as np


def score_game(game_core, numb_atte):
    '''Запускаем переданную функцию указанное число раз, чтобы узнать, 
        за какое количество попыток в среднем, переданная функция угадывает 
        случайные числа из постоянной их последовательности, которая 
        форимруется в этой функции.
        Количество запуска передаваемой функции задается вторым аргументом'''
    count_ls = [] # последовательность из количества попыток для каждого 
                  # случайного числа
    '''фиксируем RANDOM SEED, для формирования постоянной последовательности 
        случайных чисел'''
    np.random.seed(1)
    '''Создаем последовательность (список) из заданного количества случайных 
        чисел'''
    random_array = np.random.randint(1,101, size=(numb_atte))
    
    '''передаем каждое случайное число в функцию по угадыванию чисел, 
        которая возвращает кол-во попыток, потраченное на угадывание каждого 
        случайного числа. 
        Кол-во попыток для каждого случайного числа записывается в список, 
        по которому затем вычисляется среднее значение'''
    for number in random_array:
        count_ls.append(game_core(number))
    score = int(np.mean(count_ls))
    print(f"Алгоритм угадывает число в среднем за {score} попыток")
    return(score)


def game_core_v1(number):
    '''Пытаемся отгадать просто наугад перебором случайных чисел, 
        никак не используя информацию о больше или меньше.
        Функция принимает загаданное число и возвращает число попыток'''
    count = 0
    while True:
        count+=1
        predict = np.random.randint(1,101) # случайное число в угадываемом 
                                           # диапазоне
        if number == predict: 
            return(count) # выход из цикла, если угадали
        
        
def game_core_v2(number):
    '''Первым числом берем любое случайное число число, а потом уменьшаем
        или увеличиваем его в зависимости от того, больше оно или меньше 
        нужного.
        Функция принимает загаданное число и возвращает число попыток'''
    count = 1
    predict = np.random.randint(1,101)
    while number != predict:
        count+=1
        if number > predict: 
            predict += 1
        elif number < predict: 
            predict -= 1
    return(count) # выход из цикла, если угадали

def game_core_v3(number):
    '''Первым числом берем число из середины интервала случайных чисел, а потом уменьшаем 
        (округляя до целого) его в два раза, устанавливая знак в зависимости 
        от того, больше оно или меньше угадываемого.
        Функция принимает загаданное число number и возвращает число попыток
        для его угадывания'''
    count = 1
#    predict = np.random.randint(1,101)
    predict = 50 # начинаем угадывать с середины диапазона
    mult = 28 # коэф. для изменения угадываемого числа
    
    while predict != number:
        count += 1

        if count > 1000:     # ограничитель для выхода из бесконечного цикла
            break
        
        if predict < number: # выбранное число меньше угадываемого
            sign = 1
        else:                # выбранное число больше угадываемого
            sign = -1
        predict += mult*sign         
        
        if predict > 100:    # ограничиваем верхний предел
            predict = 100
        elif predict < 1:    # ограничиваем нижний предел
            predict = 1
        
        mult = round(mult/2,0)
    return(count) # выход из цикла, если угадали

score_game(game_core_v1,1000)
score_game(game_core_v2,1000)
score_game(game_core_v3,1000)


# In[ ]:




